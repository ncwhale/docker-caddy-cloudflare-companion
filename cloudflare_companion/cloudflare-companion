#!/usr/bin/python3

from __future__ import print_function
from datetime import datetime

from get_docker_secret import get_docker_secret
import atexit
import CloudFlare
import docker
import os
import re
import requests
import logging
from urllib.parse import urlparse

from.repeaterun import RepeatedRun

# setup logging
CONTAINER_LOG_LEVEL = os.environ.get('CONTAINER_LOG_LEVEL', "INFO")
logger = logging.getLogger(__name__)
VERBOSE = False

match CONTAINER_LOG_LEVEL.upper():
    case "ERROR":
        logger.setLevel(logging.ERROR)
    case "WARNING" | "WARN":
        logger.setLevel(logging.WARN)
    case "INFO":
        logger.setLevel(logging.INFO)
    case "DEBUG":
        logger.setLevel(logging.DEBUG)
    case "VERBOSE":
        logger.setLevel(logging.DEBUG)
        VERBOSE = True
    case _:
        logger.info(f"Unknown CONTAINER_LOG_LEVEL: {CONTAINER_LOG_LEVEL}, ignore.")


ch = logging.StreamHandler()
formatter = logging.Formatter('[%(levelname)s] %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

# Process env variables
STR_TRUE_RE = re.compile("^\s*(?:Y(?:ES)?|T(?:RUE)?|1)\s*$", re.IGNORECASE)
IS_STR_TRUE = lambda x : STR_TRUE_RE.match(x) != None

# Get env variables
DEFAULT_TTL = os.environ.get('DEFAULT_TTL', "1")
SWARM_MODE = IS_STR_TRUE(os.environ.get('SWARM_MODE', "FALSE"))
ENABLE_CADDY_POLL = IS_STR_TRUE(os.environ.get('ENABLE_CADDY_POLL', "FALSE"))
CADDY_VERSION = os.environ.get('CADDY_VERSION', "2")
CADDY_POLL_URL = os.environ.get('CADDY_POLL_URL', None)
CADDY_POLL_SECONDS = int(os.environ.get('CADDY_POLL_SECONDS', "60"))
DRY_RUN = IS_STR_TRUE(os.environ.get('DRY_RUN', "FALSE"))
REFRESH_ENTRIES = IS_STR_TRUE(os.environ.get('REFRESH_ENTRIES', "FALSE"))


synced_mappings = {}
CADDY_DOCKER_V2_LABEL_RE = re.compile("^caddy(?:_[0-9]+)?$", re.IGNORECASE)
CADDY_DOCKER_V2_PRELABEL_RE = re.compile("^caddy(?:_[0-9]+)?\.", re.IGNORECASE)
CADDY_DOCKER_DOMAIN_RE = re.compile("^(?:(?:(?!\-))(?:xn\-\-)?[a-z0-9\-_]{0,61}[a-z0-9]{1,1}\.)*(?:xn\-\-)?(?:[a-z0-9\-]{1,61}|[a-z0-9\-]{1,30})\.[a-z]{2,}$")
CADDY_DOCKER_HOST_DOMAIN_RE = re.compile("^host +((?:(?:(?!\-))(?:xn\-\-)?[a-z0-9\-_]{0,61}[a-z0-9]{1,1}\.)*(?:xn\-\-)?(?:[a-z0-9\-]{1,61}|[a-z0-9\-]{1,30})\.[a-z]{2,})$")
CADDY_DOCKER_WILDCARD_DOMAIN_RE = re.compile("^\*\.(?:(?:(?!\-))(?:xn\-\-)?[a-z0-9\-_]{0,61}[a-z0-9]{1,1}\.)*(?:xn\-\-)?(?:[a-z0-9\-]{1,61}|[a-z0-9\-]{1,30})\.[a-z]{2,}$")


def init_domain_config() -> list:
    RX_DOMS = re.compile('^DOMAIN[0-9]+$', re.IGNORECASE)

    domain_list = list()
    for k in os.environ:
        if not RX_DOMS.match(k):
            continue

        name = os.environ[k]
        try:
            domain = {
                'name': name,
                'proxied': IS_STR_TRUE(os.environ.get(f"{k}_PROXIED", "FALSE")),
                'zone_id': os.environ[f"{k}_ZONE_ID"],
                'ttl': os.environ.get(f"{k}_TTL", DEFAULT_TTL),
                'target_domain': os.environ.get(f"{k}_TARGET_DOMAIN", target_domain),
                'excluded_sub_domains': list(filter(None, os.environ.get(f"{k}_EXCLUDED_SUB_DOMAINS", "").split(','))),
            }

            domain_list.append(domain)

        except KeyError as e:
            logger.error(f"*** ERROR: {e} is not set!")

    for domain in domain_list:
        logger.debug("Domain Configuration: %s", domain)
        
    return domain_list


def init_caddy_from_env():
    CADDY_INCLUDED_HOST = re.compile('^CADDY_INCLUDED_HOST[0-9_]+$', re.IGNORECASE)
    CADDY_EXCLUDED_HOST = re.compile('^CADDY_EXCLUDED_HOST[0-9_]+$', re.IGNORECASE)

    caddy_included_hosts = set()
    caddy_excluded_hosts = set()
    for k in os.environ:
        if CADDY_INCLUDED_HOST.match(k):
            caddy_included_hosts.append(os.environ.get(k))

        if CADDY_EXCLUDED_HOST.match(k):
            caddy_excluded_hosts.append(os.environ.get(k))

    # re.compile here.
    caddy_included_list = list()
    caddy_excluded_list = list()

    if len(caddy_included_hosts) > 0:
        logger.debug("Caddy Host Includes")
        for caddy_included_host in caddy_included_hosts:
            caddy_included_list.append(re.compile(caddy_included_host))
            logger.debug("  %s", caddy_included_host)
    else:
        logger.debug("Caddy Host Includes: .*")
        caddy_included_list.append(re.compile(".*"))

    if len(caddy_excluded_hosts) > 0:
        logger.debug("Caddy Host Excludes")
        for caddy_excluded_host in caddy_excluded_hosts:
            caddy_excluded_list.append(re.compile(caddy_excluded_host))
            logger.debug("  %s", caddy_excluded_host)

    return caddy_included_list, caddy_excluded_list


def is_subdomain_excluded(name, domain_config)->bool:
    excluded_sub_domains = domain_config['excluded_sub_domains']

    for sub_domain in excluded_sub_domains:
        
        fqdn_with_sub_dom = sub_domain + '.' + domain_config['name']
    
        if name.find(fqdn_with_sub_dom) != -1:
            logger.info('Ignoring %s because it falls until excluded sub domain: %s', name, sub_domain)
            return True

    return False


def is_matching(name, regexes):
    for regex in regexes:
        if regex.search(name):
            return True
    return False


def point_domain(name, domain_infos):
    result = True
    for domain_info in domain_infos:
        if name == domain_info['target_domain']:
            continue

        if name.find(domain_info['name']) >= 0:
            if is_subdomain_excluded(name, domain_info):
                continue

            records = cf.zones.dns_records.get(domain_info['zone_id'], params={u'name': name})
            data = {
                u'type': u'CNAME',
                u'name': name,
                u'content': domain_info['target_domain'],
                u'ttl': domain_info['ttl'],
                u'proxied': domain_info['proxied']
            }
            if REFRESH_ENTRIES:
                try:
                    if len(records) == 0:
                        if DRY_RUN:
                            logger.info("DRY-RUN: POST to Cloudflare %s:, %s", domain_info['zone_id'], data)
                        else:
                            _ = cf.zones.dns_records.post(domain_info['zone_id'], data=data)
                        logger.info("Created new record: %s to point to %s", name, domain_info['target_domain'])
                    else:
                        for record in records:
                            if DRY_RUN:
                                logger.info("DRY-RUN: PUT to Cloudflare %s, %s:, %s", domain_info['zone_id'], record["id"], data)
                            else:
                                cf.zones.dns_records.put(domain_info['zone_id'], record["id"], data=data)
                            logger.info("Updated existing record: %s to point to %s", name, domain_info['target_domain'])
                except CloudFlare.exceptions.CloudFlareAPIError as ex:
                    logger.error('** %s - %d %s' % (name, ex, ex))
                    result = False
                    pass
            else:
                try:
                    if DRY_RUN:
                        logger.info("DRY-RUN: POST to Cloudflare %s:, %s", domain_info['zone_id'], data)
                    else:
                        _ = cf.zones.dns_records.post(domain_info['zone_id'], data=data)
                    logger.info("Created new record: %s to point to %s", name, domain_info['target_domain'])
                except CloudFlare.exceptions.CloudFlareAPIError as ex:
                    logger.error('** %s - %d %s' % (name, ex, ex))
                    result = False
    return result


def extract_domain_from_label_v2(labels):
    mappings = {}
    for prop in labels:
        value = labels.get(prop)
        if CADDY_DOCKER_V2_LABEL_RE.match(prop):
            # It's a caddy[_\d+]: domain.name,list label.
            logger.debug("caddy label: %s:%s", prop, value)
            for name in [ s.strip() for s in value.split(",")]:
                if CADDY_DOCKER_DOMAIN_RE.match(name):
                    logger.debug("  matched domain: %s:%s",  prop, name)
                    mappings[name] = 1
                elif CADDY_DOCKER_WILDCARD_DOMAIN_RE.match(name):
                    logger.debug("  wildcard domain: %s:%s",  prop, name)
        elif CADDY_DOCKER_V2_PRELABEL_RE.match(prop):
            # It's a caddy[_\d+].X label, try find host config.
            m = CADDY_DOCKER_HOST_DOMAIN_RE.match(value)
            if m is not None:
                name = m.group(1)
                logger.debug("  host domain: %s:%s",  prop, name)
                mappings[name] = 1

    return mappings


def check_container_v2(c):
    mappings = {}
    logger.debug("Called check_container_v2 for: %s", c)
    cont_id = c.attrs.get(u'Id')
    logger.debug("Process container: %s", cont_id)

    return extract_domain_from_label_v2(c.attrs.get(u'Config').get(u'Labels'))

def check_service_v2(s):
    mappings = {}
    logger.debug("Called check_service_t2 for: %s", s)
    cont_id = s
    logger.debug("Process container: %s", cont_id)

    s = client.services.get(s)
    return extract_domain_from_label_v2(s.attrs.get(u'Spec').get(u'Labels'))


def check_caddy(included_hosts, excluded_hosts):
    mappings = {}
    logger.debug("Called check_caddy")
    if CADDY_VERSION == "2":
        r = requests.get("{}/config/".format(CADDY_POLL_URL))
        if r.ok:
            # Process the caddy config json.

            # 1. Process http app, search domains.

            # 2. Process tls app, search domains.
            pass

    return mappings


def check_caddy_and_sync_mappings(included_hosts, excluded_hosts, domain_infos):
    sync_mappings(check_caddy(included_hosts, excluded_hosts),domain_infos)


def add_to_mappings(current_mappings, mappings):
    for k, v in mappings.items():
        current_mapping = current_mappings.get(k)
        if current_mapping is None or current_mapping > v:
            current_mappings[k] = v


def sync_mappings(mappings, domain_infos):
    for k, v in mappings.items():
        current_mapping = synced_mappings.get(k)
        if current_mapping is None or current_mapping > v:
            if point_domain(k, domain_infos):
                synced_mappings[k] = v


def get_initial_mappings(included_hosts, excluded_hosts):
    logger.debug("Starting Initialization Routines")

    mappings = {}
    for c in client.containers.list():
        logger.debug("Container List Discovery Loop")
        if CADDY_VERSION == "2":
            add_to_mappings(mappings, check_container_v2(c))

    if SWARM_MODE:
        logger.debug("Service List Discovery Loop")
        for s in api.services():
            full_serv_id = s["ID"]
            if CADDY_VERSION == "2":
                add_to_mappings(mappings, check_service_v2(full_serv_id))

    if CADDY_POLL_URL:
        logger.debug("Caddy List Discovery Loop")
        add_to_mappings(mappings, check_caddy(included_hosts, excluded_hosts))

    return mappings


def uri_valid(x):
    try:
        result = urlparse(x)
        return all([result.scheme, result.netloc])
    except:
        return False

def get_secret_by_env(envvar_name):
    secret_value:str
    envvar_secret_name=envvar_name + "_FILE"
    envvar_secret_value=os.getenv(envvar_secret_name)
    if envvar_secret_value:
        secret_value = get_docker_secret(envvar_secret_value, secrets_dir='/', autocast_name=False, getenv=False)
    else:
        # fallback check for original environment variable
        secret_value = get_docker_secret(envvar_name, autocast_name=False, getenv=True)
    if secret_value:
        logger.debug("Setting environment variable '%s' by docker secret '%s'.", envvar_name, envvar_secret_name)
        os.environ[envvar_name] = secret_value
        return secret_value

try:
    # Check for uppercase docker secrets or env variables
    email = get_secret_by_env('CF_EMAIL')
    token = get_secret_by_env('CF_TOKEN')

    # Check for any cf zone id based on the respective domain env var existing
    RX_DOMS = re.compile('^DOMAIN[0-9]+$', re.IGNORECASE)
    for key in os.environ:
        if not RX_DOMS.match(key):
            continue

        get_secret_by_env(f"{key}_ZONE_ID")

    # Check for lowercase docker secrets
    if not email:
        email = get_docker_secret('CF_EMAIL', autocast_name=True, getenv=True)
    if not token:
        token = get_docker_secret('CF_TOKEN', autocast_name=True, getenv=True)

    target_domain = os.environ['TARGET_DOMAIN']
    domain = os.environ['DOMAIN1']

except KeyError as e:
    exit("ERROR: {} not defined".format(e))


if DRY_RUN:
    logger.warning("Dry Run: %s", DRY_RUN)
logger.debug("Swarm Mode: %s", SWARM_MODE)
logger.debug("Refresh Entries: %s", REFRESH_ENTRIES)
logger.debug("Caddy Version: %s", CADDY_VERSION)
logger.debug("Default TTL: %s", DEFAULT_TTL)
if not email:
    logger.debug("API Mode: Scoped")
    cf = CloudFlare.CloudFlare(debug=VERBOSE, token=token)
else:
    logger.debug("API Mode: Global")
    cf = CloudFlare.CloudFlare(debug=VERBOSE, email=email, token=token)


if ENABLE_CADDY_POLL:
    if CADDY_VERSION == "2":
        if uri_valid(CADDY_POLL_URL):
            logger.debug("Caddy Poll Url: %s", CADDY_POLL_URL)
            logger.debug("Caddy Poll Seconds: %s", CADDY_POLL_SECONDS)
        else:
            ENABLE_CADDY_POLL = False
            logger.error("Caddy Polling Mode disabled because caddy api url is invalid: %s", CADDY_POLL_URL)
    else:
        ENABLE_CADDY_POLL = False
        logger.error("Caddy Polling Mode disabled because caddy version is not 2")

logger.debug("Caddy Polling Mode: %s", ENABLE_CADDY_POLL)

client = docker.from_env()

if SWARM_MODE:
    DOCKER_HOST = os.environ.get('DOCKER_HOST', None)
    api = docker.APIClient(base_url=DOCKER_HOST)

domain_config = init_domain_config()
caddy_included_hosts, caddy_excluded_hosts = init_caddy_from_env()

sync_mappings(get_initial_mappings(caddy_included_hosts, caddy_excluded_hosts), domain_config)

if ENABLE_CADDY_POLL:
    logger.debug("Starting caddy router polling")
    caddy_poll = RepeatedRun(CADDY_POLL_SECONDS, check_caddy_and_sync_mappings, caddy_included_hosts, caddy_excluded_hosts, domain_config)
    atexit.register(caddy_poll.stop)

logger.debug("Starting event watch routines")

t = datetime.now().strftime("%s")

logger.debug("Time: %s", t)

for event in client.events(since=t, filters={'Type': 'service', 'Action': u'update', 'status': u'start'}, decode=True):
    new_mappings = {}
    if event.get(u'status') == u'start':
        try:
            if CADDY_VERSION == "2":
                add_to_mappings(new_mappings, check_container_v2(client.containers.get(event.get(u'id'))))
                if SWARM_MODE:
                    add_to_mappings(new_mappings, check_service_v2(client.services.get(event.get(u'id'))))

        except docker.errors.NotFound as e:
            pass

    if SWARM_MODE:
        if event.get(u'Action') == u'update':
            try:
                if CADDY_VERSION == "2":
                    node_id = event.get(u'Actor').get(u'ID')
                    service_id = client.services.list()
                    logger.debug("Detected Update on node: %s", node_id)
                    add_to_mappings(new_mappings, check_service_v2(node_id))

            except docker.errors.NotFound as e:
                pass

    sync_mappings(new_mappings, domain_config)
